import pandas as pd

def get_port_for_genome(df, genome, translated = True):
    if translated:
        return int(df.loc[df["Genome"]==genome].Translated_BLAT_Port)
    else:
        return int(df.loc[df["Genome"]==genome].Untranslated_BLAT_Port)

def get_species_port_translated(df):
    return ["{{path}}/translated-{0}-{1}".format(i, j) for i, j in zip(df.Translated_BLAT_Port, df.Genome)]

def get_species_port_untranslated(df):
    return ["{{path}}/untranslated-{0}-{1}".format(i, j) for i, j in zip(df.Untranslated_BLAT_Port, df.Genome)]

def get_species_port_closed(df):
    l = []
    l += ["{{path}}/translated-{0}-{1}-closed".format(j, i) for i, j in zip(df.Genome, df.Translated_BLAT_Port)]
    l += ["{{path}}/untranslated-{0}-{1}-closed".format(j, i) for i, j in zip(df.Genome, df.Untranslated_BLAT_Port)]
    return l

def get_port(f):
    with open(f) as infile:
        return int(infile.read())

def filtered_beds(wildcards):
    checkpoint_output = checkpoints.filterRBHBbyBED.get(**wildcards).output[0]
    d = "output/RBB/{{genome}}/AvA-pcScore{pc_score}_pcIdent{pc_ident}_pcQuerySpan{pc_qspan}_reverse-{rgenome}/filtered/{{genome}}_intersected-{type}.bed"
    return expand(d, genome=wildcards.genome, pc_score=wildcards.pc_score, pc_ident=wildcards.pc_ident, pc_qspan=wildcards.pc_qspan, rgenome=wildcards.rgenome,
                   type=glob_wildcards(checkpoint_output).type)

# Parameters

rbb_root = "output/RBB/{{genome}}/AvA-pcScore{pc_score}_pcIdent{pc_ident}_pcQuerySpan{pc_qspan}_reverse-{rgenome}/"

wildcard_constraints:
    genome="((([A-Za-z]{1,3})([A-Za-z]{3})+)((\d{1,2}m?|[A-Z])(\.\d+)?(\.softmask)?)?(\d\.[a-z]{3}\.[a-z]{3}\.\d{8})?(-[A-Z][A-Za-z0-9]*([_.][A-Za-z]+){0,2})?(_\d{2}[A-Z][a-z]{2}\d{4}_[A-Za-z0-9]{0,6})?([-_][Vv]?\d{1,2}(\.\d{1,2}){0,2}k?)?(_HiC)?)|(mm10)|(rn6)|(hg19)|(hg38(_maskRep_noVarChr_fragWithGenes)?)|(dm6)|(fr2)",
    rgenome="((([A-Za-z]{1,3})([A-Za-z]{3})+)((\d{1,2}m?|[A-Z])(\.\d+)?(\.softmask)?)?(\d\.[a-z]{3}\.[a-z]{3}\.\d{8})?(-[A-Z][A-Za-z0-9]*([_.][A-Za-z]+){0,2})?(_\d{2}[A-Z][a-z]{2}\d{4}_[A-Za-z0-9]{0,6})?([-_][Vv]?\d{1,2}(\.\d{1,2}){0,2}k?)?(_HiC)?)|(mm10)|(rn6)|(hg19)|(hg38(_maskRep_noVarChr_fragWithGenes)?)|(dm6)|(fr2)",


# Output Directories


# Log Directories

rule RBHBTest:
    input:
        expand("{path}/filtered/{{genome}}_evidenced.bed", path=rbb_root,
               genome="loxAfr3", pc_score = 0.1, pc_ident = 0.8, pc_qspan = 0.5, rgenome = "hg38_maskRep_noVarChr_fragWithGenes")

rule start_translated_gfServer:
    input:
        twoBitFile=expand("{path}/{{genome}}{extension}", path=dir_2bit, extension = ".2bit")
    output:
        expand("{path}/translated-{{genome}}", path = dir_flags)
    log:
        expand("{path}/translated-{{genome}}.log", path=log_flags)
    shell:
        "./code/start_Translated_gfServer.sh {wildcards.genome} > {output} 2>{log}"

rule start_untranslated_gfServer:
    input:
        twoBitFile=expand("{path}/{{genome}}{extension}", path=dir_2bit, extension = ".2bit")
    output:
        expand("{path}/untranslated-{{genome}}", path=dir_flags)
    log:
        expand("{path}/untranslated-{{genome}}.log", path=log_flags)
    shell:
        "./code/start_Untranslated_gfServer.sh {wildcards.genome} > {output} 2>{log}"

rule RecBlat:
    input:
        qfile = config["query_file"],
        twoBitFile=expand("{path}/{{genome}}{extension}", path=dir_2bit, extension = ".2bit"),
        tportfile = expand("{path}/translated-{{genome}}", path=dir_flags),
        utportfile = expand("{path}/untranslated-{rgenome}", path=dir_flags),
        annoTable = "output/recBlastDBPrep/hg38_geneAcc_hashTable.tsv"
    output:
        protected(expand("{path}/output/{{genome}}_RecBlastOutput.bed", path=rbb_root))
    params:
        tport = lambda wildcards, df=pt: get_port_for_genome(df, wildcards.genome, translated=True),
        utport = lambda wildcards, df=pt: get_port_for_genome(df, wildcards.rgenome, translated=False)
    threads: 10
    shell:
        "./code/rbb.py "
        "--query-file {input.qfile} "
        "--forward-port {params.tport} "
        "--reverse-port {params.utport} "
        "--forward-species {wildcards.genome} "
        "--forward-twobit {input.twoBitFile} "
        "--reverse-species 'Homo sapiens' "
        "--reverse-twobit 'hg38_maskRep_noVarChr_fragWithGenes.2bit' "
        "--annotation_lookup_tsv {input.annoTable} "
        "--perc-score {wildcards.pc_score} "
        "--perc-identity {wildcards.pc_ident} "
        "--perc-query-span {wildcards.pc_qspan} "
        "--max-processes {threads} "
        #"gfServer stop localhost {params.tport} && "
        #"rm {input.tportfile}"

rule reciprocalBestHits:
    input:
        ancient(expand("{path}/output/{{genome}}_RecBlastOutput.bed", path=rbb_root))
    output:
        expand("{path}/RBB/{{genome}}_RecBlastOutput.bed.rbb", path=rbb_root)
    script:
        "../code/rbhb_from_bed.py {input}"

checkpoint filterRBHBbyBED:
    input:
        a=expand("{path}/RBB/{{genome}}_RecBlastOutput.bed.rbb", path=rbb_root),
        b="data/BED/{{genome}}-{type}.bed"
    output:
        expand("{path}/filtered/{{genome}}_intersected-{type}.bed", path=rbb_root)
    log:
        "logs/{{genome}}/AvA-pcScore{pc_score}_pcIdent{pc_ident}_pcQuerySpan{pc_qspan}_reverse-{rgenome}/filtered/{{genome}}_intersected-{type}.log"
    shell:
        "bedtools intersect -u -a {input.a} -b {input.b} | bedtools sort > {output} 2> {log}"

#rule filterRBHBbyfinalGuide:
#    input:
#        a="output/RBB/{{genome}}/AvA-pcScore{pc_score}_pcIdent{pc_ident}_pcQuerySpan{pc_qspan}_reverse-{rgenome}/RBB/{{genome}}_RecBlastOutput.bed.rbb",
#        b="data/BED/{{genome}}-finalGuide.bed"
#    output:
#        "output/RBB/{{genome}}/AvA-pcScore{{pc_score}}_pcIdent{{pc_ident}}_pcQuerySpan{{pc_qspan}}_reverse-{{rgenome}}/filtered/{{{genome}}}_intersected-finalGuide.bed".format(genome = genome_regex, rgenome = genome_regex.replace("genome", "rgenome"))
#    log:
#        "logs/{{genome}}/AvA-pcScore{pc_score}_pcIdent{pc_ident}_pcQuerySpan{pc_qspan}_reverse-{rgenome}/filtered/{{genome}}_intersected-finalGuide.log"
#    shell:
#        "bedtools intersect -u -a {input.a} -b {input.b} | bedtools sort > {output} 2>{log}"

rule evidencedRBHB:
    input:
        filtered_beds
    output:
        expand("{path}/filtered/{{genome}}_evidenced.bed", path=rbb_root)
    #log:
    #    "logs/{{genome}}/AvA-pcScore{pc_score}_pcIdent{pc_ident}_pcQuerySpan{pc_qspan}_reverse-{rgenome}/filtered/{{genome}}_intersected_{type}.log"
    shell:
        #"cat {input} | sort | uniq | bedtools sort > {output}"
        "echo {input} > {output}"
